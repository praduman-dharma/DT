* Cache management and its uses
In Magento 2, cache management plays a crucial role in optimizing performance, reducing load times, and ensuring a smooth shopping experience. Here's an overview of Magento 2 cache types, their purposes, and how to manage them:

# what is diffrence between cache clean and cache flush method?

Cache Clean
What It Does:

Removes invalid (outdated) cache entries from the Magento cache.
Does not delete all cache files but ensures outdated ones are refreshed.
Scope:

Operates only on Magento-specific cache types and entries.
Leaves other applications or system data in the cache storage untouched.
When to Use:

After making changes to the Magento configuration, layout, or other areas where cache needs to be regenerated.
It's less aggressive and more targeted than flushing the cache.

Cache Flush
What It Does:

Clears all cache files, including Magento's cache and any data stored in the same cache storage by other applications.
Completely empties the entire cache storage (Redis, Memcached, file storage, etc.).
Scope:

Impacts all data in the cache storage, whether it's related to Magento or not.
When to Use:

When you suspect cache corruption or need to remove all cached data entirely.
Use with caution as it might affect other applications sharing the same cache storage

# Best Practices
Use cache:clean regularly for updates to Magento configurations, layouts, or modules.
Reserve cache:flush for critical situations like resolving corrupted cache or after changing the cache backend.
When sharing cache storage across applications, use clean to avoid unnecessary disruptions.


* Index management and its uses
In Magento 2, indexing is a mechanism that transforms data (like products, categories, and prices) into optimized tables for quick access, ensuring fast and efficient store operations. Index management helps maintain the accuracy and performance of the store by updating these tables when underlying data changes.

-> Index management ensures that Magento's dynamic data is always up-to-date and optimized, playing a critical role in delivering fast and reliable storefront operations.


* What is the difference between Composer.lock and Composer.json?

composer.json

Purpose: This file defines the dependencies your project requires, as well as other metadata such as version constraints, package repositories, scripts, and configuration.
Manual Editing: Developers manually edit this file to add, update, or remove dependencies.

Version Constraints: You can specify flexible constraints (e.g., ^1.0, ~1.2.3, *) or exact versions.
Effect: It tells Composer what you want in terms of dependencies.


composer.lock

Purpose: This file locks the exact versions of dependencies that were installed in your project, ensuring consistency across environments.
Automatic Generation: Composer automatically updates this file when you run commands like composer install or composer update.
Content: Contains the resolved versions, URLs, and checksums for all installed packages, including transitive (nested) dependencies.
Effect: It ensures that all developers and environments use the same dependency versions.


# Why Both Are Needed

composer.json allows you to specify desired dependencies and flexibility for future updates.
composer.lock ensures everyone on the project uses the exact same versions, avoiding "it works on my machine" issues.


# Commands Behavior

composer install: Reads composer.lock and installs locked versions.
composer update: Updates dependencies based on composer.json, resolving new versions and updating composer.lock.


* hard dependencies and soft dependencies

A soft dependency is a package, listed in "suggest", a hard dependency a package in "require".


Hard dependency
Implies that a module cannot function without the other modules on which it depends.

Soft dependency
Implies that a module can function without the other modules on which it depends.


* What is the use of <sequence> Tab in magento2?

<sequence> declares the list of components that must be loaded before the current component is loaded. Itâ€™s used for loading a different kind of files: configuration files, view files (including CSS, LESS, and template files), or setup classes.


* ACL

Magento 2 Admin ACL panel use an authentication system and a robust system for create Access Control List Rules (ACL) which allows a store owner to create fine grained roles for each and every user in their system


# add custom field on checkout
-> add column in quote, sales_order by InstallData.php or by db_schema.xml

-> add field on checkout page by checkout_index_index.xml or by createing plugin of Magento\Checkout\Block\Checkout\LayoutProcessor class

-> save data in table by sales_model_service_quote_submit_before event

